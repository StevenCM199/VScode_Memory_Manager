//
// Created by yendry
//

#include "GCPtr.h"


template <class T> GCPtr<T> *GCPtr<T>:: instance = 0; //initialize the pointer

//SINGLETON
template<class T> GCPtr<T> *GCPtr<T>::getInstance() {
    if(!instance){
        instance = new GCPtr<T>;
    }
    return instance;
}

template<class T> GCPtr<T>::GCPtr() {
    list = new LinkedListGC<T>; //create a new list to store memory address and its given ID
}

template <class T> int GCPtr<T>:: addGCPtr(T *data){
    auto ID = reinterpret_cast<uint64_t>(data); //autogenerated ID
    //Adding the new ptr to a new node in the list
    list->addNode(data,ID);
    //Increase the amount of references because of the new ptr
    list->increaseReferences(ID);
    return ID; //return the ID for the address
}

//Decrease the amount of references of ptrs
template<class T> void GCPtr<T>::decreaseReferences(uint64_t ID) {
    list->decreaseReferences(ID);
}

//
template <class T> void GCPtr<T>::updateList() {
    for (int i = 0; i < list->getLenght(); ++i) {
        if (list->getNodo(i).amountReferences == 0) {
            list->deleteNode(i);
        }
    }
}